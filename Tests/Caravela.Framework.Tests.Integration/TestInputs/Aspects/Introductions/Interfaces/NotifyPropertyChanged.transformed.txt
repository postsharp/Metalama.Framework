[TestOutput]
[NotifyPropertyChanged]
class Car
{
    string? _make;
    double _power;
    public string? Make
    {
        get
        {
            return _make;
        }

        set
        {
            var value = value;
            if (value != this.Make)
            {
                this.OnPropertyChanged("Make");
                global::System.String dummy;
                _make = value;
            }

            return;
        }
    }
    public double Power
    {
        get
        {
            return _power;
        }

        set
        {
            var value = value;
            if (value != this.Power)
            {
                this.OnPropertyChanged("Power");
                global::System.Double dummy;
                _power = value;
            }

            return;
        }
    }


    public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

    protected void OnPropertyChanged(global::System.String name)
    {
        this.PropertyChanged?.Invoke(new global::System.ComponentModel.PropertyChangedEventArgs("name"));
    }
}