[TestOutput]
[NotifyPropertyChanged]
internal class TargetClass
: global::System.ComponentModel.INotifyPropertyChanged
{
    public int Property1
    {
        get
        {
            return this.__Property1__BackingField;
        }

        set
        {
            global::System.Int32 result;
            this.__Property1__BackingField = value;
            this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("Property1"));
            return;
        }
    }

    private int __Property1__BackingField;

    public int Property2
    {
        get
        {
            return this.__Property2__BackingField;
        }

        set
        {
            global::System.Int32 result;
            this.__Property2__BackingField = value;
            this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs("Property2"));
            return;
        }
    }

    private int __Property2__BackingField;

    public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

    event global::System.ComponentModel.PropertyChangedEventHandler? global::System.ComponentModel.INotifyPropertyChanged.PropertyChanged
    {
        add
        {
            this.PropertyChanged += value;
        }

        remove
        {
            this.PropertyChanged -= value;
        }
    }
}