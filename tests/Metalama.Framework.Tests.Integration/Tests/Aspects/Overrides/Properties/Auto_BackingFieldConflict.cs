#if TEST_OPTIONS
// @Skipped(#32572)
#endif

using Metalama.Framework.Advising;
using Metalama.Framework.Aspects;
using System;

#pragma warning disable CS0169

namespace Metalama.Framework.Tests.Integration.TestInputs.Aspects.Overrides.Properties.Auto_BackingFieldConflict
{
    /*
     * Tests that two backing storage fields generated by the linker do not conflict with each other.
     */

    public class OverrideAttribute : OverrideFieldOrPropertyAspect
    {
        public override dynamic? OverrideProperty
        {
            get
            {
                Console.WriteLine( "This is the overridden getter." );

                return meta.Proceed();
            }

            set
            {
                Console.WriteLine( "This is the overridden setter." );
                meta.Proceed();
            }
        }
    }

    // <target>
    internal class TargetClass
    {
        private int _property;
        private int _property1;
        private int _property2;
        private int _property3;
        private int _property4;
        private int _property5;
        private int _property6;
        private int _property7;
        private int _property8;
        private int _property9;
        private int _property10;

        [Override]
        public int Property { get; set; }

        [Override]
        public int Property1 { get; set; }
    }
}