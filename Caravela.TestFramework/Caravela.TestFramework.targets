<Project>

    <!-- Exclude *.t.cs from the main compilation, display them as text files instead. -->
    <ItemGroup>
        <Compile Remove="$(MSBuildProjectDirectory)\**\*.t.cs" />
        <None Include="$(MSBuildProjectDirectory)\**\*.t.cs" />
        <None Remove="$(MSBuildProjectDirectory)\obj\**\*.t.cs" />
    </ItemGroup>

    <ItemGroup>
        <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
            <_Parameter1>TargetFramework</_Parameter1>
            <_Parameter2>$(TargetFramework)</_Parameter2>
        </AssemblyAttribute>
        <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
            <_Parameter1>DefineConstants</_Parameter1>
            <_Parameter2>$(DefineConstants)</_Parameter2>
        </AssemblyAttribute>
    </ItemGroup>

    <Target Name='WriteReferenceAssemblies' AfterTargets="Build">
        <WriteLinesToFile File='$(IntermediateOutputPath)assemblies.txt' Overwrite='true'
                          Lines='@(ReferencePathWithRefAssemblies)' />
    </Target>

    <Target Name="GenerateCaravelaTestDefaultRunner" BeforeTargets="CoreCompile"
            Condition="'$(CaravelaTestGenerateDefaultRunner)'=='True'">

        <PropertyGroup>
            <_DefaultRunner>
                <![CDATA[            
// This file is automatically generated.
// It implements the Rider/Resharper adapter with the Caravela testing framework.
// It defines a default test suite that will execute all tests found in the project.
// To disable the creation of this file, define the MSBUild property 'CaravelaTestGenerateDefaultRunner' to 'False'.
// You will have to add you own test suites by deriving from the TestSuite class.

using System.Threading.Tasks%3B
using Caravela.TestFramework%3B
using Xunit%3B
using Xunit.Abstractions%3B

namespace $(RootNamespace)
{
    public class DefaultTestRunner : DefaultTestSuite
    {
        public DefaultTestRunner( ITestOutputHelper logger ) : base( logger ) { }
    
        [Theory]
        [CurrentProject]
        public Task Tests( string f ) => this.RunTestAsync( f )%3B
    }
}
]]>
            </_DefaultRunner>
        </PropertyGroup>

        <WriteLinesToFile
            File="$(IntermediateOutputPath)DefaultTestRunner.g.cs"
            Overwrite="true"
            Lines="$(_DefaultRunner)" />

        <ItemGroup>
            <Compile Include="$(IntermediateOutputPath)DefaultTestRunner.g.cs" />
        </ItemGroup>

    </Target>


    <Target Name="CleanTestOutput">
        <ItemGroup>
            <_CleanTestOutput Include="obj\\transformed\**\*.*" />
            <_CleanTestOutput Include="obj\\html\**\*.*" />
        </ItemGroup>
        <RemoveDir Directories="obj\\transformed" />
        <RemoveDir Directories="obj\\html" />
        <Delete Files="@(_CleanTestOutput)" />
    </Target>

    <Target Name="AcceptTestOutput">
        <ItemGroup>
            <_AcceptTestOutput Include="obj\\transformed\net6.0\**\*.cs" />
            <_AcceptTestOutput Include="obj\\transformed\net6.0\**\*.txt" />
            <_AcceptTestOutput Include="obj\\transformed\netframework4.8\**\*.cs" />
            <_AcceptTestOutput Include="obj\\transformed\netframework4.8\**\*.txt" />
        </ItemGroup>
        <Copy
            SourceFiles="@(_AcceptTestOutput)"
            DestinationFiles="@(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="AcceptTestHtml">
        <ItemGroup>
            <_AcceptTestOutput Include="obj\\html\$(TargetFramework)\net6.0\**\*.cs.html" />
            <_AcceptTestOutput Include="obj\\html\$(TargetFramework)\netframework4.8\**\*.cs.html" />
        </ItemGroup>
        <Copy
            SourceFiles="@(_AcceptTestOutput)"
            DestinationFiles="@(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>


    <Target Name="_ResolveCopyLocalNuGetPkgXmls" AfterTargets="ResolveReferences">
        <ItemGroup>
            <!--
         https://stackoverflow.com/a/65432020/74435
         Copy XML files from all PackageReferences to output dir.
         We need this to build the HTML titles when the option is enabled.
         -->
            <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')"
                                     Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)'!='' and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
        </ItemGroup>
    </Target>

</Project>