<Project>

    <PropertyGroup Condition="'$(MetalamaEnabled)'!='False'">
        <!-- MetalamaProjectId uniquely identifies a project configuration. It is used at design time by components that do not have access to the Project class.   
             This property must be defined in .targets, not in .props, because it relies on other properties and is not meant to be overwritten -->
        <MetalamaProjectId>$(AssemblyName.Replace(".",""))_$(MetalamaProjectIdSuffix)_$(Configuration.Replace(".","").Replace("-",""))_$(TargetFramework.Replace(".","").Replace("-",""))</MetalamaProjectId>

        <!-- Define a METALAMA compilation symbol (aka constant). -->
        <DefineConstants>$(DefineConstants);METALAMA</DefineConstants>

        <!-- This constant is used to identify the pipeline when we have only a compilation but no analyzer options -->
        <DefineConstants>$(DefinedConstants);MetalamaProjectId_$(MetalamaProjectId)</DefineConstants>

        <!-- Auxiliary files used at design time. -->
        <MetalamaAdditionalCompilationOutputDirectory Condition="'$(MetalamaDesignTimeEnabled)'=='False'">$(MSBuildProjectDirectory)\$(IntermediateOutputPath)\metalama-aux\</MetalamaAdditionalCompilationOutputDirectory>

        <!-- Design time fallback dependency that forces rerun of analyzers/source generators when changed. -->
        <MetalamaDesignTimeFallbackTouchFile Condition="'$(MetalamaDesignTimeEnabled)'=='False'">$(MetalamaAdditionalCompilationOutputDirectory)MetalamaDesignTimeTouch.touch</MetalamaDesignTimeFallbackTouchFile>
    </PropertyGroup>


    <ItemGroup Condition="'$(MetalamaCompileTimeProject)'=='True'">
        <AssemblyAttribute Include="Metalama.Framework.Aspects.CompileTimeAttribute"/>
    </ItemGroup>

    <ItemGroup Condition="'$(DesignTimeBuild)' == 'True' AND '$(MetalamaDesignTimeEnabled)'=='False'">
        <AdditionalFiles Include="$(MetalamaDesignTimeFallbackTouchFile)" Visible="False" />
    </ItemGroup>

    <Target Name="ExportMetalamaFrameworkProperties" BeforeTargets="PrepareForBuild">
        <Error Text="The IntermediateOutputPath property is not defined." Condition="'$(IntermediateOutputPath)'==''"/>
        <PropertyGroup>
            <MetalamaBuildTouchFile>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)MetalamaBuild.touch</MetalamaBuildTouchFile>
            <MetalamaSourceGeneratorTouchFile>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)MetalamaSourceGenerator.touch</MetalamaSourceGeneratorTouchFile>
        </PropertyGroup>
    </Target>

    <Target Name="CreateMetalamaTouchFiles" BeforeTargets="BeforeCompile">
        <!-- We create a touch file with a new arbitrary content every time that the file is absent. This file is used to signal
             the design-time Metalama pipeline that a build has started. When the design-time pipeline needs this information again, it will
             delete the file. It should do that only when the source code has changed (even if it is not saved). We don't overwrite an existing
             file because this would break incremental build -->
        <WriteLinesToFile File="$(MetalamaBuildTouchFile)" Lines=">$([System.Guid]::NewGuid())"
                          Condition="!Exists('$(MetalamaBuildTouchFile)')"/>

        <!-- We create the generator touch file so that it is included in the project. This file is changed by the Roslyn analysis process. -->
        <WriteLinesToFile File="$(MetalamaSourceGeneratorTouchFile)" Lines=">$([System.Guid]::NewGuid())"
                          Condition="!Exists('$(MetalamaSourceGeneratorTouchFile)')"/>
        <ItemGroup>
            <AdditionalFiles Include="$(MetalamaBuildTouchFile)" Visible="False"/>
            <AdditionalFiles Include="$(MetalamaSourceGeneratorTouchFile)"  Visible="False"/>
            <Clean Include="$(MetalamaBuildTouchFile)"/>
            <Clean Include="$(MetalamaSourceGeneratorTouchFile)"/>
        </ItemGroup>
    </Target>
</Project>