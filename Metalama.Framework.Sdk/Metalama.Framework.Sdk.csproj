<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <PackageDescription>
            Metalama SDK. A tool for custom source code modifying extensions using the Roslyn API. More powerful than source generators.
        </PackageDescription>
        <RootNamespace>Metalama.Framework.Engine</RootNamespace>

        <!-- This is to prevent the Metalama.Compiler.Sdk package to change our nuspec -->
		<MetalamaCompilerDisablePackCustomization>True</MetalamaCompilerDisablePackCustomization>

        <PackageReadmeFile>README.md</PackageReadmeFile>
    </PropertyGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="Metalama.Framework.Engine.4.0.1" />
        <InternalsVisibleTo Include="Metalama.Framework.Engine.4.4.0" />
        <InternalsVisibleTo Include="Metalama.Framework.Tests.UnitTests" />
        <InternalsVisibleTo Include="Metalama.Framework.Tests.Integration" />
        <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(FakeItEasyKey)" LoadsWithinVisualStudio="false" />

        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="$(RoslynApiMinVersion)" />
        <PackageReference Include="Metalama.Compiler.Sdk" Version="$(MetalamaCompilerVersion)" />

        <!-- We don't want Metalama to customize the build of SDK projects, so we have to list private assets.
             Note that this is not sufficient because SDK projects will likely transitively import Metalama.Framework,
             so we have the MetalamaCompileTimeProject property defined in Metalama.Framework.Sdk.props.
         -->
        <ProjectReference Include="..\Metalama.Framework\Metalama.Framework.csproj" PrivateAssets="Analyzers;Build;BuildTransitive" />

    </ItemGroup>

    <!-- Packaging -->
    <ItemGroup>
        <None Include="README.md" Pack="true" PackagePath="\" />
    </ItemGroup>

</Project>
