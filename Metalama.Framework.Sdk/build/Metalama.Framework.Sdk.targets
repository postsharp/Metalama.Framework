<?xml version="1.0" encoding="utf-8"?>

<Project>

    <PropertyGroup>
        <NoWarn>$(NoWarn);NU5100;NU5128</NoWarn>
    </PropertyGroup>


    <Target Name="MetalamaSdkSetAnalyzerAssembliesInPackage"
            DependsOnTargets="ResolveReferences;BuiltProjectOutputGroup">
        <ItemGroup>
            <!-- include assemblies and XML files from the current project -->
            <None Include="@(BuiltProjectOutputGroupOutput);@(DocumentationProjectOutputGroupOutput)" Pack="true" PackagePath="metalama"
                  Visible="false"/>
            <!-- include assemblies from references -->
            <!--
            <None Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"
                  Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false"/>
            -->
        </ItemGroup>
    </Target>

    <!-- based on https://stackoverflow.com/a/56018426/41071 -->
    <PropertyGroup>
        <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);MetalamaSdkSetLibAssembliesInPackage</TargetsForTfmSpecificBuildOutput>
    </PropertyGroup>

    <Target Name="MetalamaSdkSetLibAssembliesInPackage" DependsOnTargets="ResolveReferences">
        <ItemGroup>
            <!-- include assemblies from references -->
            <!--
            <BuildOutputInPackage
                    Include="@(ReferenceCopyLocalPaths->WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))"/>
            -->
            <!-- exclude assemblies and XML files from the current project -->
            <BuiltProjectOutputGroupOutput Remove="@(BuiltProjectOutputGroupOutput)"/>
			<DocumentationProjectOutputGroupOutput Remove="@(DocumentationProjectOutputGroupOutput)"/>
        </ItemGroup>
    </Target>

	<!--
	- The target 'MetalamaSdkGenerateNuspec' is added to 'BeforePack' target (see below) to be executed before original 'GenerateNuspec' target executes.
	- This is because 'PackTask' generates both .nuspec file (only if it doesn't exist) and .nupkg file based on that .nuspec.
	- During this process .nuspec is generated with dependencies from 'project.assets.json' file.
	- Because of this we pass our .nuspec to 'MetalamaSdkUpdateNuspec' target (see below) and overwrite the dependencies in 'RewriteMetalamaSdkNuspec' task.
    - After this, When the original 'GenerateNuspec' target is executed, the updated .nuspec file already exists, so it only generates new .nupkg with our replacements.
	-->
    <!-- based on https://github.com/NuGet/NuGet.Client/blob/1f3a4d9/src/NuGet.Core/NuGet.Build.Tasks.Pack/NuGet.Build.Tasks.Pack.targets#L195 -->
    <Target Name="MetalamaSdkGenerateNuspec"
            DependsOnTargets="$(GenerateNuspecDependsOn);_CalculateInputsOutputsForPack;_GetProjectReferenceVersions;_InitializeNuspecRepositoryInformationProperties"
            Condition="$(IsPackable) == 'true'" Inputs="@(NuGetPackInput)" Outputs="@(NuGetPackOutput)">
        <PackTask PackItem="$(PackProjectInputFile)"
                  PackageFiles="@(_PackageFiles)"
                  PackageFilesToExclude="@(_PackageFilesToExclude)"
                  PackageVersion="$(PackageVersion)"
                  PackageId="$(PackageId)"
                  Title="$(Title)"
                  Authors="$(Authors)"
                  Description="$(PackageDescription)"
                  Copyright="$(Copyright)"
                  RequireLicenseAcceptance="$(PackageRequireLicenseAcceptance)"
                  LicenseUrl="$(PackageLicenseUrl)"
                  ProjectUrl="$(PackageProjectUrl)"
                  IconUrl="$(PackageIconUrl)"
                  ReleaseNotes="$(PackageReleaseNotes)"
                  Tags="$(PackageTags)"
                  DevelopmentDependency="$(DevelopmentDependency)"
                  BuildOutputInPackage="@(_BuildOutputInPackage)"
                  ProjectReferencesWithVersions="@(_ProjectReferencesWithVersions)"
                  TargetPathsToSymbols="@(_TargetPathsToSymbols)"
                  TargetFrameworks="@(_TargetFrameworks)"
                  FrameworksWithSuppressedDependencies="@(_FrameworksWithSuppressedDependencies)"
                  AssemblyName="$(AssemblyName)"
                  PackageOutputPath="$(PackageOutputAbsolutePath)"
                  IncludeSymbols="$(IncludeSymbols)"
                  IncludeSource="$(IncludeSource)"
                  PackageTypes="$(PackageType)"
                  IsTool="$(IsTool)"
                  RepositoryUrl="$(RepositoryUrl)"
                  RepositoryType="$(RepositoryType)"
                  RepositoryBranch="$(RepositoryBranch)"
                  RepositoryCommit="$(RepositoryCommit)"
                  SourceFiles="@(_SourceFiles->Distinct())"
                  NoPackageAnalysis="$(NoPackageAnalysis)"
                  NoDefaultExcludes="$(NoDefaultExcludes)"
                  MinClientVersion="$(MinClientVersion)"
                  Serviceable="$(Serviceable)"
                  FrameworkAssemblyReferences="@(_FrameworkAssemblyReferences)"
                  ContinuePackingAfterGeneratingNuspec="$(ContinuePackingAfterGeneratingNuspec)"
                  NuspecOutputPath="$(NuspecOutputAbsolutePath)"
                  IncludeBuildOutput="$(IncludeBuildOutput)"
                  BuildOutputFolders="$(BuildOutputTargetFolder)"
                  ContentTargetFolders="$(ContentTargetFolders)"
                  RestoreOutputPath="$(RestoreOutputAbsolutePath)"
                  NuspecFile="$(NuspecFileAbsolutePath)"
                  NuspecBasePath="$(NuspecBasePath)"
                  NuspecProperties="$(NuspecProperties)"
                  AllowedOutputExtensionsInPackageBuildOutputFolder="$(AllowedOutputExtensionsInPackageBuildOutputFolder)"
                  AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder="$(AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder)"
                  NoWarn="$(NoWarn)"
                  WarningsAsErrors="$(WarningsAsErrors)"
                  TreatWarningsAsErrors="$(TreatWarningsAsErrors)"
                  OutputFileNamesWithoutVersion="$(OutputFileNamesWithoutVersion)"
                  InstallPackageToOutputPath="$(InstallPackageToOutputPath)"
                  SymbolPackageFormat="$(SymbolPackageFormat)"
                  PackageLicenseFile="$(PackageLicenseFile)"
                  PackageLicenseExpression="$(PackageLicenseExpression)"
                  PackageLicenseExpressionVersion="$(PackageLicenseExpressionVersion)"
                  Deterministic="$(Deterministic)"
                  PackageIcon="$(PackageIcon)"
                  ContinueOnError="true"/>
    </Target>

	<!--
	'MetalamaSdkUpdateNuspec' target gets the .nuspec file we generated and puts it to the 'RewriteMetalamaSdkNuspec' task.
	-->
    <Target Name="MetalamaSdkUpdateNuspec" DependsOnTargets="MetalamaSdkGenerateNuspec" Condition="'$(IsPackable)'=='True'">
        <ItemGroup>
            <FilteredOutput Include="@(NuGetPackOutput)" Condition="%(Extension) == '.nuspec'"/>
        </ItemGroup>

        <PropertyGroup>
            <NuspecFileAbsolutePath>@(FilteredOutput)</NuspecFileAbsolutePath>
        </PropertyGroup>

        <ItemGroup>
            <MetalamaSdkPackageReplacement Include="Metalama.Framework.Sdk" ReplacedBy="Metalama.Framework"/>
        </ItemGroup>

        <RewriteMetalamaSdkNuspec File="$(NuspecFileAbsolutePath)" Replacements="@(MetalamaSdkPackageReplacement)"/>
    </Target>

	<!-- By default, IsPackable is not set to any initial value, so we check for whether it was not set to false. -->
    <PropertyGroup Condition="'$(IsPackable)'!='False'">
        <BeforePack>$(BeforePack); MetalamaSdkSetAnalyzerAssembliesInPackage; MetalamaSdkUpdateNuspec</BeforePack>
    </PropertyGroup>


    <Target Name="_AddMetalamaPropsToPackage">
        <PropertyGroup>
            <_MetalamaProps>
                &lt;Project&gt;
                &lt;ItemGroup&gt;
                &lt;MetalamaPlugInAssemblyPath Include="%24(MSBuildThisFileDirectory)../metalama/$(AssemblyName).dll"/&gt;
                &lt;/ItemGroup&gt;
                &lt;/Project&gt;

            </_MetalamaProps>
        </PropertyGroup>

        <WriteLinesToFile File="$(OutputPath)\$(PackageId).props" Lines="$(_MetalamaProps)" WriteOnlyWhenDifferent="true"/>
        
        <ItemGroup>
            <TfmSpecificPackageFile Include="$(OutputPath)\$(PackageId).props" PackagePath="build" />
            <TfmSpecificPackageFile Include="$(OutputPath)\$(PackageId).props" PackagePath="buildTransitive" />
        </ItemGroup>

    </Target>

</Project>