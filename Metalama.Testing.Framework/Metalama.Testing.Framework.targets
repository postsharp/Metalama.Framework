<Project>
    <ItemGroup>

        <!-- Exclude *.t.cs from the main compilation, display them as text files instead, and fix file nesting -->
        <Compile Remove="$(MSBuildProjectDirectory)\**\*.t.cs" />
        <None Include="$(MSBuildProjectDirectory)\**\*.t.cs">
            <DependentUpon>$([System.String]::Copy('%(Filename)').Replace('.t','')).cs</DependentUpon>
            <SubType>Code</SubType>
        </None>

        <None Remove="$(MSBuildProjectDirectory)\obj\**\*.t.cs" />

        <!-- Fix file nesting for *.Aspect.cs -->
        <Compile Update="$(MSBuildProjectDirectory)\**\*.Aspect.cs">
            <DependentUpon>$([System.String]::Copy('%(Filename)').Replace('.Aspect','')).cs</DependentUpon>
            <SubType>Code</SubType>
        </Compile>

        <!-- Fix file nesting for *.t.txt -->
        <None Include="$(MSBuildProjectDirectory)\**\*.t.txt" Exclude="$(MSBuildProjectDirectory)\obj\**\*.t.txt">
            <DependentUpon>$([System.String]::Copy('%(Filename)').Replace('.t','')).cs</DependentUpon>
        </None>

    </ItemGroup>

    <Target Name="AddMetalamaTestFrameworkAttributes" DependsOnTargets="AddImplicitDefineConstants"
            BeforeTargets="CoreGenerateAssemblyInfo">
        <ItemGroup>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>DefineConstants</_Parameter1>
                <_Parameter2>$(DefineConstants)</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>ProjectDirectory</_Parameter1>
                <_Parameter2>$(MSBuildProjectDirectory)</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="Xunit.TestFrameworkAttribute"
                               Condition="'$(MetalamaTestReplaceFramework)'!='False'">
                <_Parameter1>Metalama.Testing.Framework.AspectTestFramework</_Parameter1>
                <_Parameter2>Metalama.Testing.Framework</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>ReferenceAssemblyList</_Parameter1>
                <_Parameter2>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)assemblies.txt</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>AnalyzerAssemblyList</_Parameter1>
                <_Parameter2>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)analyzers.txt</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>MetalamaDebugTestFramework</_Parameter1>
                <_Parameter2>$(MetalamaDebugTestFramework)</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute"
                               Condition="'$(GeneratedGlobalUsingsFile)'!=''">
                <_Parameter1>GlobalUsingsFile</_Parameter1>
                <_Parameter2>$(GeneratedGlobalUsingsFile)</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>TargetFramework</_Parameter1>
                <_Parameter2>$(TargetFramework)</_Parameter2>
            </AssemblyAttribute>
            <AssemblyAttribute Include="System.Reflection.AssemblyMetadataAttribute">
                <_Parameter1>MetalamaLicense</_Parameter1>
                <_Parameter2>$(MetalamaLicense)</_Parameter2>
            </AssemblyAttribute>
        </ItemGroup>
    </Target>

    <Target Name='WriteReferenceAssemblies' AfterTargets="Build">
        <WriteLinesToFile File='$(IntermediateOutputPath)assemblies.txt' Overwrite='true'
                          Lines='@(ReferencePathWithRefAssemblies)' />
        <WriteLinesToFile File='$(IntermediateOutputPath)analyzers.txt' Overwrite='true'
                          Lines='@(Analyzer)' />
    </Target>

    <Target Name="GenerateMetalamaTestDefaultRunner" BeforeTargets="CoreCompile"
            Condition="'$(MetalamaTestGenerateDefaultRunner)'=='True'">

        <PropertyGroup>
            <_DefaultRunner>
                <![CDATA[            
// This file is automatically generated.
// It implements the Rider/Resharper adapter with the Metalama testing framework.
// It defines a default test suite that will execute all tests found in the project.
// To disable the creation of this file, define the MSBUild property 'MetalamaTestGenerateDefaultRunner' to 'False'.
// You will have to add you own test suites by deriving from the AspectTestSuite class.

using System.Threading.Tasks%3B
using Metalama.Testing.Framework%3B
using Xunit%3B
using Xunit.Abstractions%3B

namespace $(RootNamespace)
{
    public class DefaultTestRunner : DefaultAspectTestSuite
    {
        public DefaultTestRunner( ITestOutputHelper logger ) : base( logger ) { }
    
        [Theory]
        [CurrentProject]
        public Task Tests( string f ) => this.RunTestAsync( f )%3B
    }
}
]]>
            </_DefaultRunner>
        </PropertyGroup>

        <WriteLinesToFile
            File="$(IntermediateOutputPath)DefaultTestRunner.g.cs"
            Overwrite="true"
            Lines="$(_DefaultRunner)" />

        <ItemGroup>
            <Compile Include="$(IntermediateOutputPath)DefaultTestRunner.g.cs" />
        </ItemGroup>

    </Target>


    <Target Name="CleanTestOutput">
        <ItemGroup>
            <_CleanTestOutput Include="obj\transformed\**\*.*" />
            <_CleanTestOutput Include="obj\html\**\*.*" />
        </ItemGroup>
        <RemoveDir Directories="obj\transformed" />
        <RemoveDir Directories="obj\html" />
        <Delete Files="@(_CleanTestOutput)" />
    </Target>

    <Target Name="_AcceptTestOutput">
        <ItemGroup>
            <_AcceptTestOutput Include="obj\transformed\$(TargetFramework)\**\*.cs" />
            <_AcceptTestOutput Include="obj\transformed\$(TargetFramework)\**\*.txt" />
        </ItemGroup>
        <Message
            Text="$(MSBuildProjectFile)($(TargetFramework)): Accepting @(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')"
            Importance="high" Condition="'@(_AcceptTestOutput)'!=''" />
        <Copy SourceFiles="@(_AcceptTestOutput)"
              DestinationFiles="@(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="_AcceptTestHtml">
        <ItemGroup>
            <_AcceptTestOutput Include="obj\html\$(TargetFramework)\**\*.cs.html" />
        </ItemGroup>
        <Message
            Text="$(MSBuildProjectFile)($(TargetFramework)): Accepting @(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')"
            Importance="high" Condition="'@(_AcceptTestOutput)'!=''" />
        <Copy
            SourceFiles="@(_AcceptTestOutput)"
            DestinationFiles="@(_AcceptTestOutput->'%(RecursiveDir)%(Filename)%(Extension)')" />
    </Target>


    <!-- The following tasks rely on _ComputeTargetFrameworkItems to multicast to all target frameworks.
        The _ComputeTargetFrameworkItems target is defined in Microsoft.Common.CrossTargeting.targets and results in @(_InnerBuildProjects) -->
    <Target Name="_AcceptTestOutputCrossTargeting" DependsOnTargets="_ComputeTargetFrameworkItems">
        <MSBuild Projects="@(_InnerBuildProjects)" Targets="_AcceptTestOutput" />
    </Target>

    <Target Name="_AcceptTestHtmlCrossTargeting" DependsOnTargets="_ComputeTargetFrameworkItems">
        <MSBuild Projects="@(_InnerBuildProjects)" Targets="_AcceptTestHtml" />
    </Target>

    <Target Name="AcceptTestOutput">
        <!-- Cross-targeting -->
        <CallTarget Targets="_AcceptTestOutputCrossTargeting" Condition="'$(TargetFrameworks)' != ''" />
        <!-- Single target -->
        <CallTarget Targets="_AcceptTestOutput" Condition="'$(TargetFrameworks)' == ''" />
    </Target>

    <Target Name="AcceptTestHtml">
        <!-- Cross-targeting -->
        <CallTarget Targets="_AcceptTestHtmlCrossTargeting" Condition="'$(TargetFrameworks)' != ''" />
        <!-- Single target -->
        <CallTarget Targets="_AcceptTestHtml" Condition="'$(TargetFrameworks)' == ''" />
    </Target>


    <Target Name="_ResolveCopyLocalNuGetPkgXmls" AfterTargets="ResolveReferences">
        <ItemGroup>
            <!--
         https://stackoverflow.com/a/65432020/74435
         Copy XML files from all PackageReferences to output dir.
         We need this to build the HTML titles when the option is enabled.
         -->
            <ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths->'%(RootDir)%(Directory)%(Filename).xml')"
                                     Condition="'%(ReferenceCopyLocalPaths.NuGetPackageId)'!='' and Exists('%(RootDir)%(Directory)%(Filename).xml')" />
        </ItemGroup>
    </Target>

</Project>