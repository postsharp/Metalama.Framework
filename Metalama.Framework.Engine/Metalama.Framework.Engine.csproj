<Project Sdk="Microsoft.NET.Sdk">

    <Import Project="../build/RoslynVersion/Latest.imports" />
    
    <PropertyGroup>
        <TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <MetalamaCompilerDisablePackCustomization>True</MetalamaCompilerDisablePackCustomization>
        <UseMetalamaCompiler>Private</UseMetalamaCompiler>
        <AssemblyName>Metalama.Framework.Engine.$(ThisRoslynVersionNoPreview)</AssemblyName>
        <PackageId>Metalama.Framework.Engine</PackageId>
        <!-- We need to pack Metalama.SystemTypes.dll because the test projects will not include it if they do not target .NET Standard 2.0 themselves. -->
        <PackMetalamaSystemTypes>True</PackMetalamaSystemTypes>
        <!-- Packaging -->
        <PackageDescription>The main implementation of Metalama.Framework. It should normally never be referenced in any user project.</PackageDescription>
        <PackageReadmeFile>README.md</PackageReadmeFile>

        <!-- warning NU5118: File 'C:/src/Metalama/Metalama.Framework.Engine.Analyzers/bin/Debug/netstandard2.0/Metalama.Framework.Engine.Analyzers.dll' is not
added because the package already contains file 'analyzers/dotnet/cs/Metalama.Framework.Engine.Analyzers.dll' -->
        <NoWarn>$(NoWarm);NU5118</NoWarn>
    </PropertyGroup>


    <ItemGroup>
        <ProjectReference Include="../Metalama.Framework.CompileTime/Metalama.Framework.CompileTime.csproj" ReferenceOutputAssembly="false" />

        <!-- We have to embed the compile-time build of Metalama.Framework so we can reference it to create
             the compile-time assembly. See ReferenceAssemblyLocator. -->
        <EmbeddedResource Include="../Metalama.Framework.CompileTime/bin/$(Configuration)/netstandard2.0/Metalama.Framework.dll">
            <LogicalName>Metalama.Framework.dll</LogicalName>
        </EmbeddedResource>

        <!-- Metalama.Framework depends on Metalama.SystemTypes, so we have to embed that as well. -->
        <EmbeddedResource Include="../Metalama.SystemTypes/bin/$(Configuration)/netstandard2.0/Metalama.SystemTypes.dll">
            <LogicalName>Metalama.SystemTypes.dll</LogicalName>
        </EmbeddedResource>
        
        <!-- We also embed the self-contained build of Metalama.Compiler.Interface.dll because at run-time, this project
            may receive the build containing forwarders (this happens in Metalama.Try). However, we need to compile against
            the self-contained version. -->
        <EmbeddedResource Include="$(PkgMetalama_Compiler_Sdk)/lib/netstandard2.0/Metalama.Compiler.Interface.dll">
            <LogicalName>Metalama.Compiler.Interface.dll</LogicalName>
        </EmbeddedResource>
    </ItemGroup>

    <ItemGroup>
        <Compile Include="../.generated/$(ThisRoslynVersionNoPreview)/Metalama.Framework.Engine/*.cs" Condition="Exists('../.generated/$(ThisRoslynVersionNoPreview)')" />
        <Compile Include="../.generated/$(ThisRoslynVersionNoPreview)-stubs/Metalama.Framework.Engine/*.cs" Condition="!Exists('../.generated/$(ThisRoslynVersionNoPreview)')" />
    </ItemGroup>

    <ItemGroup>
        <!-- By convention, we use InternalsVisibleTo only for test projects that must have access to internals.. -->
        <InternalsVisibleTo Include="Metalama.Framework.Tests.Benchmarks" />
        <InternalsVisibleTo Include="Metalama.Framework.Tests.UnitTests.$(ThisRoslynVersionNoPreview)" />
        <InternalsVisibleTo Include="Metalama.Framework.Tests.Integration.$(ThisRoslynVersionNoPreview)" />
        <InternalsVisibleTo Include="DynamicProxyGenAssembly2" Key="$(FakeItEasyKey)" LoadsWithinVisualStudio="false" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="DiffPlex" Version="$(DiffPlexVersion)" />
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Workspaces" Version="$(ThisRoslynVersion)" />
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp.Features" Version="$(ThisRoslynVersion)" />
        <PackageReference Include="Microsoft.CodeAnalysis.Workspaces.Common" Version="$(ThisRoslynVersion)" />
        <PackageReference Include="Metalama.Compiler.Sdk" Version="$(MetalamaCompilerVersion)">
            <GeneratePathProperty>True</GeneratePathProperty>
        </PackageReference>
        <PackageReference Include="Metalama.Backstage" Version="$(MetalamaBackstageVersion)" />
        <PackageReference Include="Metalama.Backstage.Tools" Version="$(MetalamaBackstageVersion)" />

        <PackageReference Include="Microsoft.Bcl.HashCode" Version="$(MicrosoftBclHashCodeVersion)" />
        <PackageReference Include="K4os.Hash.xxHash" Version="$(K4osHashxxHashVersion)" />
        <PackageReference Include="Microsoft.CSharp" Version="$(MicrosoftCSharpVersion)" />
        <PackageReference Include="Newtonsoft.Json" Version="$(NewtonsoftJsonVersion)" />
        <PackageReference Include="System.Reflection.Emit" Version="4.7.0" />
        <PackageReference Include="System.Runtime.Serialization.Formatters" Version="4.3.0" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="../Metalama.Framework.Introspection/Metalama.Framework.Introspection.csproj" />
        <ProjectReference Include="../Metalama.Framework.CompileTimeContracts/Metalama.Framework.CompileTimeContracts.csproj" />
        <ProjectReference Include="../Metalama.Framework/Metalama.Framework.csproj" />
        <ProjectReference Include="../Metalama.Framework.Sdk/Metalama.Framework.Sdk.csproj" />

        <!-- The following references handle [Memo] -->
        <ProjectReference Include="../source-dependencies/Metalama.Framework.Private/src/Metalama.SourceTransformer/Metalama.SourceTransformer.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" Condition="Exists('../source-dependencies/Metalama.Framework.Private')" />
        <ProjectReference Include="../Metalama.Framework.Engine.Analyzers/Metalama.Framework.Engine.Analyzers.csproj" OutputItemType="Analyzer" ReferenceOutputAssembly="false" />
    </ItemGroup>

    <!-- This is a work-around of PostSharp not preserving the public-signing flag. (#29763) -->
    <ItemGroup>
        <PackageReference Include="FakeSign" Version="0.9.2" PrivateAssets="all" GeneratePathProperty="true" />
    </ItemGroup>

    <PropertyGroup>
        <_FixPublicSigningTouchFile>$(MSBuildThisFileDirectory)/obj/$(Configuration)/$(TargetFramework)/fakesign_touch</_FixPublicSigningTouchFile>
    </PropertyGroup>

    <Target Name="FixPublicSigning" Inputs="@(IntermediateAssembly->'%(FullPath)')" Outputs="$(_FixPublicSigningTouchFile)" AfterTargets="PostSharp">
        <Exec Command="$(PkgFakeSign)/tools/FakeSign.exe $(MSBuildProjectDirectory)/obj/$(Configuration)/$(TargetFramework)/$(AssemblyName).dll" />
        <Touch Files="$(_FixPublicSigningTouchFile)" AlwaysCreate="True" ContinueOnError="True" />
    </Target>
    
    <!-- Include system types as managed resources -->
    <Import Sdk="PostSharp.Engineering.Sdk" Project="Assets.props" />

    <ItemGroup>
        <EmbeddedResource Include="$(AssetsDirectory)/system-types/*.cs" Link="(Resources)/%(Filename)" />
    </ItemGroup>

    <!-- Packaging -->
    <ItemGroup>
        <None Include="README.md" Pack="true" PackagePath="/" />
    </ItemGroup>

    <PropertyGroup>
        <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_AddAnalyzerToPackage</TargetsForTfmSpecificContentInPackage>
    </PropertyGroup>

    <Target Name="_AddAnalyzerToPackage">
        <ItemGroup>
            <TfmSpecificPackageFile Include="$(MSBuildProjectDirectory)/../Metalama.Framework.Engine.Analyzers/bin/$(Configuration)/netstandard2.0/Metalama.Framework.Engine.Analyzers.dll" PackagePath="analyzers/dotnet/cs" />
        </ItemGroup>

    </Target>
</Project>
