# This is the main build script. It is not required to run it before loading the projects in the IDE.
# Main use cases:
#  1. Create development NuGet packages:
#         Build.ps1 -Local
#  2. Run the complete test suite in a development environment:
#         Build.ps1 -Local -Test
#  3. TeamCity: build debug packages and run tests:
#         Build.ps1 -Numbered <NUMBER> -Test
#  4. TeamCity: build release packages and run tests:
#         Build.ps1 -Public -Release -Test


param ( 

# Creates a release build instead of a debug one
[switch] $Release = $false, 

# Creates a local build with a version number based on a timestamp (typically a development build)
[switch] $Local = $false, 

# Creates a numbered build (typically internal builds on a build server)
[int] $Numbered = -1, 

# Creates a public build
[switch] $Public = $false,

# Creates CaravelaVersion.props but does not build the project
[switch] $Prepare = $false,

# Runs the test suite,
[switch] $Test = $false

)

$ErrorActionPreference = "Stop" 

if ( $Release ) {
$configuration = "release"
} else {
$configuration = "debug"
}


function Clean() {
    if (Test-Path "artifacts\bin\Debug" -PathType Container ) {
        del "artifacts\bin\Debug\*.nupkg"
    }

    if ( Test-Path CaravelaVersion.props ) {
        Remove-Item CaravelaVersion.props
    }
}

function CreateVersionFile() {
    $timestamp = [System.DateTime]::Now.ToString('MMdd.HHmm')
        

    if ( $Local ) {
        # Local build with timestamp-based version and randomized package number.
        $packageVersion = "`$(MainVersion)-local-$([System.DateTime]::Now.Year)$timestamp-$([string]::Format( "{0:x8}", $(Get-Random) ) )-$configuration"
        $assemblyVersion = "`$(MainVersion)$timestamp"
    } elseif ( $Numbered -ge 0 ) {
        # Build server build with a build number given by the build server
        $packageVersion = "`$(MainVersion)-build-$Numbered-$configuration"
        $assemblyVersion = "`$(MainVersion).$Numbered"
    } elseif ( $Public ) {
        # Public build
        $packageVersion = "`$(MainVersion)$(PackageVersionSuffix)"
        $assemblyVersion = "`$(MainVersion)"
    } else {
        Throw "One of the following flags must be used: -local, -numbered or -public"
    }


    $props = @"
<!-- This file is generated by build.ps1 -->
<Project>
    <Import Project="MainVersion.props" />
    <PropertyGroup>
        <CaravelaVersion>$packageVersion</CaravelaVersion>
        <CaravelaAssemblyVersion>$assemblyVersion</CaravelaAssemblyVersion>
    </PropertyGroup>
    <PropertyGroup>
        <RestoreAdditionalProjectSources>
            `$(RestoreAdditionalProjectSources);
            `$(MSBuildThisFileDirectory)artifacts\bin\Release;
            `$(MSBuildThisFileDirectory)artifacts\bin\Debug
        </RestoreAdditionalProjectSources>
    </PropertyGroup>
</Project>
"@



    New-Item CaravelaVersion.props -Value $props | Out-Null


}

function Restore() {
    & dotnet restore -p:Configuration=$configuration 
    if ($LASTEXITCODE -ne 0 ) { exit }
}

function Pack() {
    & dotnet pack -p:Configuration=$configuration --nologo --no-restore
    if ($LASTEXITCODE -ne 0 ) { exit }

    Write-Host "Build successful" -ForegroundColor Green
}

function Test() {
    & dotnet test -p:Configuration=$configuration --nologo --no-restore
    if ($LASTEXITCODE -ne 0 ) { exit }
    & dotnet build .\Tests\Caravela.Framework.TestApp\Caravela.Framework.TestApp\Caravela.Framework.TestApp.csproj --nologo
    if ($LASTEXITCODE -ne 0 ) { exit }

    Write-Host "Tests successful" -ForegroundColor Green
}



Clean
CreateVersionFile
Restore

if ( -not( $Prepare ) ) {
    Pack
}

if ( $Test ) {
    Test
}
