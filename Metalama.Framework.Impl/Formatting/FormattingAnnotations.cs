// Copyright (c) SharpCrafters s.r.o. All rights reserved.
// This project is not open source. Please see the LICENSE.md file in the repository root for details.

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Diagnostics.CodeAnalysis;
using System.Linq;

namespace Metalama.Framework.Impl.Formatting
{
    internal static class FormattingAnnotations
    {
        /// <summary>
        /// Annotation that means that the syntax has been generated by Metalama. This is used to selectively format the code,
        /// and can be used in the future for syntax highlighting.
        /// </summary>
        public static readonly SyntaxAnnotation GeneratedCode = new( "Metalama_Generated" );

        /// <summary>
        /// Annotation that means that the syntax stems from source code. This can be added to a child node of a node annotated
        /// with <see cref="GeneratedCode"/>.
        /// </summary>
        public static readonly SyntaxAnnotation SourceCode = new( "Metalama_SourceCode" );

        [return: NotNullIfNotNull( "node" )]
        private static T? AddAnnotationInsideBlock<T>( this T? node, SyntaxAnnotation annotation, bool addToBrackets = false )
            where T : SyntaxNode
        {
            switch ( node )
            {
                case BlockSyntax block:
                    var annotatedBlock = (T) (object) block.WithStatements(
                        SyntaxFactory.List( block.Statements.Select( s => s.AddAnnotationInsideBlock( annotation, true ) ) ) );

                    if ( addToBrackets )
                    {
                        annotatedBlock = annotatedBlock.WithAdditionalAnnotations( annotation );
                    }

                    return annotatedBlock;

                default:
                    return node?.WithAdditionalAnnotations( annotation );
            }
        }

        public static SyntaxToken AddGeneratedCodeAnnotation( this SyntaxToken node ) => node.WithAdditionalAnnotations( GeneratedCode );

        [return: NotNullIfNotNull( "node" )]
        public static T? AddGeneratedCodeAnnotation<T>( this T? node )
            where T : SyntaxNode
            => node?.AddAnnotationInsideBlock( GeneratedCode );

        [return: NotNullIfNotNull( "node" )]
        public static T? AddSourceCodeAnnotation<T>( this T? node )
            where T : SyntaxNode
            => node?.AddAnnotationInsideBlock( SourceCode );

        public static T WithFormattingAnnotationsFrom<T>( this T node, SyntaxNode source )
            where T : SyntaxNode
        {
            if ( source.HasAnnotation( SourceCode ) )
            {
                return node.AddSourceCodeAnnotation();
            }
            else if ( source.HasAnnotation( GeneratedCode ) )
            {
                return node.AddGeneratedCodeAnnotation();
            }
            else
            {
                return node;
            }
        }
    }
}