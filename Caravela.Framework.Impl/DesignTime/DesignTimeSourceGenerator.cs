// Copyright (c) SharpCrafters s.r.o. All rights reserved.
// This project is not open source. Please see the LICENSE.md file in the repository root for details.

using Caravela.Compiler;
using Caravela.Framework.Impl.DesignTime.Pipeline;
using Caravela.Framework.Impl.Options;
using Caravela.Framework.Impl.Pipeline;
using Caravela.Framework.Impl.Utilities;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Linq;

namespace Caravela.Framework.Impl.DesignTime
{
    /// <summary>
    /// Our implementation of <see cref="ISourceGenerator"/>. Provides the source code generated by the pipeline.
    /// </summary>
    [ExcludeFromCodeCoverage]
    public class DesignTimeSourceGenerator : ISourceGenerator
    {
        private bool _isEnabled;

        void ISourceGenerator.Execute( GeneratorExecutionContext context )
        {
            if ( !this._isEnabled || context.Compilation is not CSharpCompilation compilation )
            {
                return;
            }

            try
            {
                // TODO: Skip (or use different code) if design time exp is disabled.
                Logger.Instance?.Write( $"DesignTimeSourceGenerator.Execute('{compilation.AssemblyName}')." );

                var projectOptions = new ProjectOptions( context.AnalyzerConfigOptions );

                DebuggingHelper.AttachDebugger( projectOptions );

                if ( !projectOptions.DesignTimeEnabled )
                {
                    // Execute the fallback.
                    Logger.Instance?.Write(
                        $"DesignTimeSourceGenerator.Execute('{compilation.AssemblyName}'): DesignTimeEnabled is false, will output fallback files from {projectOptions.AuxiliaryFilePath}." );

                    ExecuteFallback( context, projectOptions );

                    return;
                }

                // Execute the pipeline.
                if ( !DesignTimeAspectPipelineFactory.Instance.TryExecute(
                    projectOptions,
                    compilation,
                    context.CancellationToken,
                    out var compilationResult ) )
                {
                    Logger.Instance?.Write( $"DesignTimeSourceGenerator.Execute('{compilation.AssemblyName}'): the pipeline failed." );

                    return;
                }

                // Add introduced syntax trees.
                var sourcesCount = 0;

                foreach ( var introducedSyntaxTree in compilationResult.IntroducedSyntaxTrees )
                {
                    sourcesCount++;
                    context.AddSource( introducedSyntaxTree.Name, introducedSyntaxTree.GeneratedSyntaxTree.GetText() );
                }

                Logger.Instance?.Write( $"DesignTimeSourceGenerator.Execute('{compilation.AssemblyName}'): {sourcesCount} sources generated." );

                // We don't report diagnostics because it seems to be without effect.
                // All diagnostics are reported by the analyzer.
            }
            catch ( Exception e ) when ( DesignTimeExceptionHandler.MustHandle( e ) )
            {
                DesignTimeExceptionHandler.ReportException( e );
            }
        }

        private static void ExecuteFallback( GeneratorExecutionContext context, IProjectOptions projectOptions )
        {
            var serviceProvider = ServiceProvider.Empty.WithServices( projectOptions );
            var auxiliaryFileProvider = new AuxiliaryFileProvider( serviceProvider );

            if ( projectOptions.AuxiliaryFilePath == null )
            {
                return;
            }

            var sourcesCount = 0;

            foreach ( var file in auxiliaryFileProvider.GetAuxiliaryFiles()
                .Where( f => f.Kind == AuxiliaryFileKind.DesignTimeFallback && StringComparer.Ordinal.Equals( Path.GetExtension( f.Path ), ".cs" ) ) )
            {
                context.AddSource( Path.GetFileName( file.Path ), SourceText.From( file.Content, file.Content.Length ) );
                sourcesCount++;
            }

            Logger.Instance?.Write( $"DesignTimeSourceGenerator.Execute('{context.Compilation.AssemblyName}'): {sourcesCount} sources generated." );
        }

        void ISourceGenerator.Initialize( GeneratorInitializationContext context )
        {
            this._isEnabled = !CaravelaCompilerInfo.IsActive;
        }
    }
}